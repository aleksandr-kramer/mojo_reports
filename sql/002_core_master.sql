-- sql/002_core_master.sql
SET client_encoding TO 'UTF8';

-- на всякий случай
CREATE SCHEMA IF NOT EXISTS core;
SET search_path TO core, public;

-- понадобится для EXCLUDE USING gist (... WITH =)
CREATE EXTENSION IF NOT EXISTS btree_gist;

-- 1) STAFF
-- источник: Excel "Список сотрудников.xlsx"; staff_id должен маппиться на /schedule.staff
CREATE TABLE IF NOT EXISTS staff (
  staff_id     integer PRIMARY KEY,       -- = Id (совместим с /schedule.staff ключом)
  staff_name   text    NOT NULL,          -- "Фамилия Имя"
  email        text    NOT NULL UNIQUE,   -- в домене школы
  gender       text,
  dob          date,
  phone        text,
  active       boolean NOT NULL DEFAULT true
);

-- 2) STUDENT
-- источник: Excel "Список учеников.xlsx"
CREATE TABLE IF NOT EXISTS student (
  student_id     integer PRIMARY KEY,         -- = Id (равен student_id / id_student в API)
  first_name     text    NOT NULL,
  last_name      text    NOT NULL,
  gender         text,
  dob            date,
  email          text    NOT NULL UNIQUE,     -- в домене школы, уникален
  programme_code text    REFERENCES ref_programme(programme_code)
                          ON UPDATE RESTRICT ON DELETE SET NULL,
  cohort         integer,                     -- год обучения (grade)
  active         boolean NOT NULL DEFAULT true
);

-- 3) PARENT
-- источник: Excel "Список родителей.xlsx" (и/или "Список учеников.xlsx")
-- УСЛОВИЕ: email и phone у родителя — одиночные поля (не массивы).
CREATE TABLE IF NOT EXISTS parent (
  parent_id   integer PRIMARY KEY,     -- если в Excel нет стабильного ID, можно будет перейти на GENERATED BY DEFAULT AS IDENTITY
  parent_name text    NOT NULL,
  email       text,                    -- у разных родителей могут совпадать; без UNIQUE
  phone       text,
  active      boolean NOT NULL DEFAULT true
);

-- 4) STUDENT_PARENT (M:N)
CREATE TABLE IF NOT EXISTS student_parent (
  student_id  integer NOT NULL REFERENCES student(student_id)
                        ON UPDATE CASCADE ON DELETE CASCADE,
  parent_id   integer NOT NULL REFERENCES parent(parent_id)
                        ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT student_parent_pk PRIMARY KEY (student_id, parent_id)
);

-- 5) CLASS
-- источник: Excel "Список классов.xlsx"
CREATE TABLE IF NOT EXISTS class (
  class_id     serial PRIMARY KEY,
  class_code   text    NOT NULL UNIQUE,     -- Title (например, '2A')
  cohort       integer
);

-- 6) CLASS_TEACHER (классный руководитель, история)
-- в каждый момент времени у класса один классный руководитель
CREATE TABLE IF NOT EXISTS class_teacher (
  class_id     integer NOT NULL REFERENCES class(class_id)
                       ON UPDATE CASCADE ON DELETE CASCADE,
  staff_id     integer NOT NULL REFERENCES staff(staff_id)
                       ON UPDATE CASCADE ON DELETE RESTRICT,
  valid_from   date    NOT NULL,
  valid_to     date,
  CONSTRAINT class_teacher_pk PRIMARY KEY (class_id, valid_from),
  CONSTRAINT class_teacher_dates_ck CHECK (valid_to IS NULL OR valid_to >= valid_from),
  CONSTRAINT class_teacher_no_overlap
    EXCLUDE USING gist (
      class_id WITH =,
      daterange(valid_from, COALESCE(valid_to, 'infinity'::date), '[]') WITH &&
    ) DEFERRABLE INITIALLY IMMEDIATE
);

-- 7) STUDENT_CLASS_ENROLMENT (история принадлежности ученика к классу)
CREATE TABLE IF NOT EXISTS student_class_enrolment (
  student_id   integer NOT NULL REFERENCES student(student_id)
                       ON UPDATE CASCADE ON DELETE CASCADE,
  class_id     integer NOT NULL REFERENCES class(class_id)
                       ON UPDATE CASCADE ON DELETE RESTRICT,
  valid_from   date    NOT NULL,
  valid_to     date,
  CONSTRAINT student_class_enrolment_pk PRIMARY KEY (student_id, class_id, valid_from),
  CONSTRAINT student_class_enrolment_dates_ck CHECK (valid_to IS NULL OR valid_to >= valid_from)
);

-- 8) STAFF_DEPARTMENT (сотрудник может состоять в нескольких департаментах)
-- источник: Excel "Список сотрудников.xlsx"; ref_department из 001
CREATE TABLE IF NOT EXISTS staff_department (
  staff_id       integer NOT NULL REFERENCES staff(staff_id)
                           ON UPDATE CASCADE ON DELETE CASCADE,
  department_id  integer NOT NULL REFERENCES ref_department(department_id)
                           ON UPDATE RESTRICT ON DELETE RESTRICT,
  position_title text,
  CONSTRAINT staff_department_pk PRIMARY KEY (staff_id, department_id)
);

-- 9) TEACHING_GROUP (академические группы: предмет × набор)
-- источники: /schedule (group_id, group), /marks.* (group_name)
CREATE TABLE IF NOT EXISTS teaching_group (
  group_id     integer PRIMARY KEY,                 -- /schedule.group_id
  group_name   text    NOT NULL UNIQUE,             -- /schedule.group, /marks.*.group_name
  subject_id   integer REFERENCES ref_subject(subject_id)
                        ON UPDATE RESTRICT ON DELETE SET NULL,
  active       boolean NOT NULL DEFAULT true
);

-- 10) GROUP_STAFF_ASSIGNMENT (кто ведёт группу, PERMANENT назначение)
-- в единицу времени у группы один "постоянный" учитель (замены — в расписании/уроках)
CREATE TABLE IF NOT EXISTS group_staff_assignment (
  group_id    integer NOT NULL REFERENCES teaching_group(group_id)
                        ON UPDATE CASCADE ON DELETE CASCADE,
  staff_id    integer NOT NULL REFERENCES staff(staff_id)
                        ON UPDATE CASCADE ON DELETE RESTRICT,
  valid_from  date    NOT NULL,
  valid_to    date,
  CONSTRAINT group_staff_assignment_pk PRIMARY KEY (group_id, valid_from),
  CONSTRAINT group_staff_assignment_dates_ck CHECK (valid_to IS NULL OR valid_to >= valid_from),
  CONSTRAINT group_staff_assignment_no_overlap
    EXCLUDE USING gist (
      group_id WITH =,
      daterange(valid_from, COALESCE(valid_to, 'infinity'::date), '[]') WITH &&
    ) DEFERRABLE INITIALLY IMMEDIATE
);

-- 11) GROUP_STUDENT_MEMBERSHIP (принадлежность ученика к группе)
CREATE TABLE IF NOT EXISTS group_student_membership (
  group_id    integer NOT NULL REFERENCES teaching_group(group_id)
                        ON UPDATE CASCADE ON DELETE CASCADE,
  student_id  integer NOT NULL REFERENCES student(student_id)
                        ON UPDATE CASCADE ON DELETE CASCADE,
  valid_from  date    NOT NULL,
  valid_to    date,
  CONSTRAINT group_student_membership_pk PRIMARY KEY (group_id, student_id, valid_from),
  CONSTRAINT group_student_membership_dates_ck CHECK (valid_to IS NULL OR valid_to >= valid_from)
);
